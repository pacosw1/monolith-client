[{"/Users/paquitaladelbarrio/Documents/pr-hummus/monolith-client/src/index.js":"1","/Users/paquitaladelbarrio/Documents/pr-hummus/monolith-client/src/reportWebVitals.js":"2","/Users/paquitaladelbarrio/Documents/pr-hummus/monolith-client/src/views/root.js":"3","/Users/paquitaladelbarrio/Documents/pr-hummus/monolith-client/src/views/product/index.js":"4","/Users/paquitaladelbarrio/Documents/pr-hummus/monolith-client/src/views/product/styles.js":"5","/Users/paquitaladelbarrio/Documents/pr-hummus/monolith-client/src/views/product/queries.js":"6"},{"size":683,"mtime":1607554681635,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1607103474875,"results":"9","hashOfConfig":"8"},{"size":530,"mtime":1607549744708,"results":"10","hashOfConfig":"8"},{"size":3185,"mtime":1607564482108,"results":"11","hashOfConfig":"8"},{"size":194,"mtime":1607550052895,"results":"12","hashOfConfig":"8"},{"size":330,"mtime":1607554831348,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gqftez",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/paquitaladelbarrio/Documents/pr-hummus/monolith-client/src/index.js",[],"/Users/paquitaladelbarrio/Documents/pr-hummus/monolith-client/src/reportWebVitals.js",[],"/Users/paquitaladelbarrio/Documents/pr-hummus/monolith-client/src/views/root.js",[],"/Users/paquitaladelbarrio/Documents/pr-hummus/monolith-client/src/views/product/index.js",["27","28","29","30"],"import { useLazyQuery } from '@apollo/client';\n\nimport {SEARCH_TAGS} from \"./queries\"\nimport React, { useEffect, useState } from 'react';\n\nimport {SearchBar} from \"./styles\"\n\n\n\nconst NewProduct = props => {\n\n    let [tags, setTags] = useState([])\n    let [info, setInfo] = useState({\n        title: \"\",\n        price: 0.00,\n        description: \"\",\n    })\n\n    let [images, setImages] = useState([])\n\n    const onTagSearch = (e, getTags) => {\n        getTags({variables: { keyword: e.target.value }})\n    }\n\n    console.log(images)\n\n\n\n\n    //INFO\n\n\n\n    //IMAGES\n\n\n    const removeImage = (name) => {\n\n        let copy = [...images]\n\n        copy = copy.filter(img => img.name !== name)\n\n        setImages(copy)\n    }\n\n    const updateImageFiles = (files) => {\n\n        files = Array.from(files)\n\n\n        setImages(files)\n    }\n\n\n\n    //TAGS\n    const addTag = (tag) => {\n\n        let copy = [...tags]\n        copy.push(tag)\n        \n        setTags(copy)\n\n    }\n\n    const removeTag = (id) => {\n\n        let copy = [...tags]\n\n        copy = copy.filter(x => x.id !== id)\n        \n        setTags(copy)\n\n    }\n\n    const renderTags = tags.map(tag => {\n        return <ExistingTag removeTag={removeTag} id={tag.id} key={tag.id} title={tag.title}/>\n    })\n\n    return <div>\n        <h1>Product Info</h1>\n        <h1>Images</h1>\n        <ImageSection images={images} updateImageFiles={updateImageFiles} removeImage={removeImage}/>\n        \n        <h1>Tags</h1>\n        {renderTags}\n        <TagSection tags={tags} addTag={addTag} onSearch={onTagSearch}/>\n    </div>\n}\n\n\n\n\n\n\n\n//IMAGES\n\nconst ImageSection = ({images, updateImageFiles, removeImage}) => {\n\n\n    console.log(images[0])\n    const renderPreview = images.map((img, key) => {\n        return <Image src={URL.createObjectURL(img)} removeImage={removeImage} name={img.name} key={key} alt=\"preview\"/>\n    })\n\n    return <>\n\n        <input type=\"file\" multiple={true} onChange={ e => updateImageFiles(e.target.files) } />\n        {renderPreview}\n    </>\n}\n\nconst Image = ({src, name, alt, removeImage}) => {\n\n    return <img onClick={() => removeImage(name)} height={100} width={100} src={src} alt={alt}/>\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//TAGS\n\nconst TagSection = ({tags, addTag, onSearch}) => {\n\n\n    let [getTags, { loading, error, data }] = useLazyQuery(SEARCH_TAGS);\n\n    if (data) {\n\n        let hash = {}\n\n        tags.forEach(tag => {\n            if (!hash[tag.id]) {\n                hash[tag.id] = 1\n            }\n        });\n        let copy = [...data.searchTags]\n\n        data = copy.filter(x => !hash[x.id]) \n    }\n\n\n    const renderTags = (data ? data: []).map(tag => {\n        return <Tag addTag={addTag} key={tag.id} id={tag.id} title={tag.name}/>\n    })\n\n\n    return <div>\n        <h1>{error ? \"Error connecting to server\" : null} </h1>\n        <h1>Select Tags</h1>\n        <SearchBar onChange={e => onSearch(e, getTags)}/>\n\n        {renderTags}\n        \n    </div>\n}\n\n\n\n//tags\n\nconst ExistingTag = ({id, title, removeTag}) => {\n\n    return <h1 onClick={() => removeTag(id)}>{title}</h1>\n}\n\n\nconst Tag = ({id, title, addTag}) => {\n\n    return <h1 onClick={() => addTag({id, title})}>{id} {title}</h1>\n}\n\nexport default NewProduct","/Users/paquitaladelbarrio/Documents/pr-hummus/monolith-client/src/views/product/styles.js",[],"/Users/paquitaladelbarrio/Documents/pr-hummus/monolith-client/src/views/product/queries.js",[],{"ruleId":"31","severity":1,"message":"32","line":4,"column":17,"nodeType":"33","messageId":"34","endLine":4,"endColumn":26},{"ruleId":"31","severity":1,"message":"35","line":13,"column":10,"nodeType":"33","messageId":"34","endLine":13,"endColumn":14},{"ruleId":"31","severity":1,"message":"36","line":13,"column":16,"nodeType":"33","messageId":"34","endLine":13,"endColumn":23},{"ruleId":"31","severity":1,"message":"37","line":139,"column":21,"nodeType":"33","messageId":"34","endLine":139,"endColumn":28},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'info' is assigned a value but never used.","'setInfo' is assigned a value but never used.","'loading' is assigned a value but never used."]